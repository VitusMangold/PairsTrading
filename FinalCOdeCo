import yfinance as yf
import pandas as pd
import numpy as np
import ta  # Technical Analysis library
import matplotlib.pyplot as plt
import ipywidgets as widgets  # For interactive elements in Jupyter notebooks
from IPython.display import display, clear_output

# --- Download Data ---

# Set the time range for data download
start_date = '2015-10-01'
end_date = '2024-01-01'

# Download historical stock data for Mastercard (MA) and Visa (V)
stock1 = yf.download('MA', start=start_date, end=end_date)  
stock2 = yf.download('V', start=start_date, end=end_date) 

# Download historical VIX data
vix = yf.download('^VIX', start=start_date, end=end_date)

# --- Indicator Calculations ---

# Calculate the Average Directional Index (ADX) for trend strength
def calculate_adx(data):
    data['ADX'] = ta.trend.adx(data['High'], data['Low'], data['Adj Close'], window=14)
    return data

# Calculate a Moving Average (MA) to smooth out price trends
def calculate_moving_average(data, window=20):
    data['MA'] = data['Adj Close'].rolling(window=window).mean()
    return data

# Apply ADX and Moving Average calculations to both stocks
stock1 = calculate_adx(stock1)
stock2 = calculate_adx(stock2)
stock1 = calculate_moving_average(stock1)
stock2 = calculate_moving_average(stock2)

# Calculate the Relative Strength Index (RSI) for momentum analysis
def calculate_momentum_indicators(data):
    data['RSI'] = ta.momentum.rsi(data['Adj Close'], window=14)
    return data

# Apply RSI calculation to both stocks
stock1 = calculate_momentum_indicators(stock1)
stock2 = calculate_momentum_indicators(stock2)

# --- Momentum Pair Trading Strategy ---

# Generate trading signals based on ADX and RSI values for momentum trading
def momentum_pair_trading(stock1, stock2, rsi_upper=75, rsi_lower=25):
    signals = []
    for i in range(len(stock1)):
        # Check if ADX is above 25, indicating a strong trend
        if stock1['ADX'].iloc[i] > 25:
            # Signal to exit if RSI crosses above the upper threshold
            if stock1['RSI'].iloc[i] > rsi_upper:
                signals.append((stock1.index[i], 'Exit Long MA'))
            elif stock2['RSI'].iloc[i] > rsi_upper:
                signals.append((stock1.index[i], 'Exit Long V'))
            # Signal to enter if RSI crosses below the lower threshold    
            elif stock1['RSI'].iloc[i] < rsi_lower:
                signals.append((stock1.index[i], 'Enter Long MA'))
            elif stock2['RSI'].iloc[i] < rsi_lower:
                signals.append((stock1.index[i], 'Enter Long V'))
    return signals

# --- Mean-Reversion Pair Trading Strategy ---

# Generate mean-reversion trading signals based on the spread between the two stocks and VIX
def mean_reversion_pair_trading(stock1, stock2, vix_threshold):
    # Calculate the spread between stock1 and stock2
    spread = stock1['Adj Close'] - stock2['Adj Close']
    # Calculate the rolling mean and standard deviation of the spread
    spread_mean = spread.rolling(window=20).mean()
    spread_std = spread.rolling(window=20).std()
    
    signals = []
    for i in range(len(spread)):
        # Check if ADX is 25 or below, indicating a weak trend and if VIX exceeds the threshold
        if stock1['ADX'].iloc[i] <= 25 and vix['Adj Close'].iloc[i] > vix_threshold:
            # Signal to enter long or short positions based on the spread threshold
            if spread.iloc[i] > spread_mean.iloc[i] + 2 * spread_std.iloc[i]:
                signals.append((stock1.index[i], 'Enter Long V, Short MA'))
            elif spread.iloc[i] < spread_mean.iloc[i] - 2 * spread_std.iloc[i]:
                signals.append((stock1.index[i], 'Enter Long MA, Short V'))
            # Signal to exit if the spread is close to the mean
            elif abs(spread.iloc[i] - spread_mean.iloc[i]) <= spread_std.iloc[i]:
                signals.append((stock1.index[i], 'Exit Position'))
    return signals

# --- Backtesting Strategy with Risk Management ---
# Function to backtest trading strategy with trailing stop-loss and take-profit conditions
def backtest_strategy_with_trailing_stop(stock1, stock2, signals, transaction_cost=0.1, trailing_stop_percentage=0.05, take_profit_percentage=0.1):
    returns = []
    in_position = False
    entry_price1 = None
    entry_price2 = None
    position_type = None
    trailing_stop_price1 = None
    trailing_stop_price2 = None

    for date, action in signals:
        # Enter position if a new signal appears and no position is currently held
        if 'Enter' in action and not in_position:
            entry_price1 = stock1['Adj Close'].loc[date]
            entry_price2 = stock2['Adj Close'].loc[date]
            position_type = action
            in_position = True
            
            # Set initial trailing stop based on entry price
            if position_type == 'Enter Long V, Short MA':
                trailing_stop_price1 = entry_price1 * (1 - trailing_stop_percentage)
                trailing_stop_price2 = entry_price2 * (1 + trailing_stop_percentage)
            elif position_type == 'Enter Long MA, Short V':
                trailing_stop_price1 = entry_price1 * (1 + trailing_stop_percentage)
                trailing_stop_price2 = entry_price2 * (1 - trailing_stop_percentage)

        elif in_position:
            # Calculate current price for the held positions
            current_price1 = stock1['Adj Close'].loc[date]
            current_price2 = stock2['Adj Close'].loc[date]

            # Update trailing stop based on favorable price movement
            if position_type == 'Enter Long V, Short MA':
                # Adjust trailing stop up for long position on V, down for short on MA
                trailing_stop_price1 = max(trailing_stop_price1, current_price1 * (1 - trailing_stop_percentage))
                trailing_stop_price2 = min(trailing_stop_price2, current_price2 * (1 + trailing_stop_percentage))
                current_return = (current_price1 - entry_price1) - (current_price2 - entry_price2)
            elif position_type == 'Enter Long MA, Short V':
                # Adjust trailing stop up for long position on MA, down for short on V
                trailing_stop_price1 = min(trailing_stop_price1, current_price1 * (1 + trailing_stop_percentage))
                trailing_stop_price2 = max(trailing_stop_price2, current_price2 * (1 - trailing_stop_percentage))
                current_return = (current_price2 - entry_price2) - (current_price1 - entry_price1)

            # Check trailing stop and take-profit conditions
            if (position_type == 'Enter Long V, Short MA' and (current_price1 <= trailing_stop_price1 or current_price2 >= trailing_stop_price2)) or \
               (position_type == 'Enter Long MA, Short V' and (current_price1 >= trailing_stop_price1 or current_price2 <= trailing_stop_price2)) or \
               current_return >= take_profit_percentage * entry_price1:
                # Calculate net return considering transaction cost
                net_return = current_return - transaction_cost
                returns.append(net_return)
                in_position = False  # Reset position status

            # Exit position if an exit signal is triggered
            if 'Exit' in action:
                exit_price1 = current_price1
                exit_price2 = current_price2
                
                # Calculate returns for the exit action
                if position_type == 'Enter Long V, Short MA':
                    gross_return = (exit_price1 - entry_price1) - (exit_price2 - entry_price2)
                elif position_type == 'Enter Long MA, Short V':
                    gross_return = (exit_price2 - entry_price2) - (exit_price1 - entry_price1)

                net_return = gross_return - transaction_cost
                returns.append(net_return)
                in_position = False  # Reset position status

    # Sum up all returns to calculate the total return
    total_return = np.sum(returns)
    return total_return, returns



# --- Calculate Performance Metrics ---

# Function to calculate various performance metrics for evaluation
def calculate_additional_performance_metrics(returns):
    risk_free_rate = 0.01  # Assume a risk-free rate of 1%
    returns = np.array(returns)
    excess_returns = returns - risk_free_rate / 252

    # Sharpe Ratio
    sharpe_ratio = np.mean(excess_returns) / np.std(excess_returns) * np.sqrt(252)

    # Sortino Ratio
    downside_returns = np.where(returns < 0, returns, 0)
    sortino_ratio = np.mean(returns) / np.std(downside_returns) * np.sqrt(252) if np.std(downside_returns) != 0 else np.nan

    # Calmar Ratio
    cumulative_returns = np.cumsum(returns)
    max_drawdown = np.max(np.maximum.accumulate(cumulative_returns) - cumulative_returns)
    annual_return = np.mean(returns) * 252  # Annualized return
    calmar_ratio = annual_return / max_drawdown if max_drawdown != 0 else np.nan

    # Volatility
    volatility = np.std(returns) * np.sqrt(252)  # Annualized volatility

    # Winning Percentage
    winning_trades = len([r for r in returns if r > 0])
    total_trades = len(returns)
    winning_percentage = winning_trades / total_trades * 100 if total_trades > 0 else 0

    return sharpe_ratio, sortino_ratio, calmar_ratio, max_drawdown, volatility, winning_percentage

# --- Interactive Function to Display Results ---

# Update function to generate and display trading signals, returns, and performance metrics
def update_signals(rsi_upper, rsi_lower, vix_threshold):
    momentum_signals = momentum_pair_trading(stock1, stock2, rsi_upper, rsi_lower)
    mean_reversion_signals = mean_reversion_pair_trading(stock1, stock2, vix_threshold)
    
    # Combine and sort all signals by date
    final_signals = momentum_signals + mean_reversion_signals
    final_signals = sorted(final_signals, key=lambda x: x[0])

    # Backtest the strategy and calculate total returns and individual returns
    total_return, strategy_returns = backtest_strategy_with_risk_management(stock1, stock2, final_signals)

    # Download S&P 500 data for benchmark comparison
    benchmark = yf.download('^GSPC', start=start_date, end=end_date)
    benchmark['Daily Return'] = benchmark['Adj Close'].pct_change()
    benchmark_return = (1 + benchmark['Daily Return']).prod() - 1
    alpha = total_return - benchmark_return

    # Calculate performance metrics for the strategy
    sharpe_ratio, sortino_ratio, calmar_ratio, max_drawdown, volatility, winning_percentage = calculate_additional_performance_metrics(strategy_returns)

    # Display strategy performance
    print(f"Strategy Return: {total_return:.2%}")
    print(f"S&P 500 Return: {benchmark_return:.2%}")
    print(f"Strategy Alpha: {alpha:.2%}")
    print(f"Sharpe Ratio: {sharpe_ratio:.2f}")
    print(f"Sortino Ratio: {sortino_ratio:.2f}")
    print(f"Calmar Ratio: {calmar_ratio:.2f}")
    print(f"Maximum Drawdown: {max_drawdown:.2f}")
    print(f"Annualized Volatility: {volatility:.2f}")
    print(f"Winning Percentage: {winning_percentage:.2f}%")

# --- Widgets for Interactive Threshold Adjustment ---

# Create sliders for upper and lower RSI bounds and VIX threshold
rsi_upper_slider = widgets.IntSlider(value=80, min=50, max=100, step=1, description='RSI Upper Bound:')
rsi_lower_slider = widgets.IntSlider(value=20, min=0, max=50, step=1, description='RSI Lower Bound:')
vix_threshold_slider = widgets.IntSlider(value=15, min=10, max=50, step=1, description='VIX Threshold:')

# Button to update signals based on slider values
update_button = widgets.Button(description="Update Signals")

# Function to handle button click events
def on_button_clicked(b):
    clear_output(wait=True)
    display(rsi_upper_slider, rsi_lower_slider, vix_threshold_slider, update_button)
    update_signals(rsi_upper_slider.value, rsi_lower_slider.value, vix_threshold_slider.value)

update_button.on_click(on_button_clicked)

# Display the sliders and the button
display(rsi_upper_slider, rsi_lower_slider, vix_threshold_slider, update_button)
